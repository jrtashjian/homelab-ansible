- name: Ensure libguestfs-tools are available
  ansible.builtin.apt:
    state: present
    package:
      - libguestfs-tools

- name: Gathering existing VMs
  ansible.builtin.shell: pvesh get "/nodes/{{ inventory_hostname_short }}/qemu" --output-format json
  register: pve_vms_raw
  changed_when: false
  tags: [ cloudinit-templates, rebuild-cloudinit-templates ]

- name: Set pve_vms as a list of VM names
  ansible.builtin.set_fact:
    pve_vms: "{{ pve_vms_raw.stdout | from_json | json_query('[*].name') }}"
  changed_when: false
  tags: [ cloudinit-templates, rebuild-cloudinit-templates ]

- name: Remove existing Cloud-Init templates
  ansible.builtin.shell: "qm destroy $(qm list | awk '/{{ item.key }}/ {print $1}') --destroy-unreferenced-disk --purge"
  with_dict: "{{ proxmox_kvm }}"
  when: "item.key in pve_vms" # Only remove existing VMs
  tags: [ never, rebuild-cloudinit-templates ]

- name: Delete downloaded Cloud-Init images
  ansible.builtin.file:
    path: "/home/ansible/{{ item.value.cloudimg | default(proxmox_kvm_defaults.cloudimg) }}"
    state: absent
  with_dict: "{{ proxmox_kvm }}"
  when: "item.key in pve_vms"
  tags: [ never, rebuild-cloudinit-templates ]

- name: Update pve_vms to remove destroyed VM keys
  ansible.builtin.set_fact:
    pve_vms: "{{ pve_vms | difference([item.key]) }}"
  with_dict: "{{ proxmox_kvm }}"
  when: "item.key in pve_vms"
  tags: [ never, rebuild-cloudinit-templates ]

- name: Download Cloud-Init images
  ansible.builtin.get_url:
    url: "{{ item.value.cloudimg_url | default(proxmox_kvm_defaults.cloudimg_url) }}"
    dest: "/home/ansible/{{ item.value.cloudimg | default(proxmox_kvm_defaults.cloudimg) }}"
  with_dict: "{{ proxmox_kvm }}"
  tags: [ cloudinit-templates, rebuild-cloudinit-templates ]

- name: Ensure QEMU Guest Agent in Cloud-Init images
  ansible.builtin.shell: |
    virt-customize -a /home/ansible/{{ item.value.cloudimg | default(proxmox_kvm_defaults.cloudimg) }} --install qemu-guest-agent,python3
    virt-customize -a /home/ansible/{{ item.value.cloudimg | default(proxmox_kvm_defaults.cloudimg) }} --truncate /etc/machine-id
  with_dict: "{{ proxmox_kvm }}"
  tags: [ cloudinit-templates, rebuild-cloudinit-templates ]

- name: Prepare Cloud-Init templates
  ansible.builtin.shell: >
    VMID="{{ item.value.vmid | default('$(pvesh get /cluster/nextid)') }}";

    qm create $VMID
    --name "{{ item.key }}"
    --scsi0 "{{ item.value.storage | default(proxmox_kvm_defaults.storage) }}":0,import-from=/home/ansible/"{{ item.value.cloudimg | default(proxmox_kvm_defaults.cloudimg) }}",discard=on,iothread=1
    --ide2 "{{ item.value.storage | default(proxmox_kvm_defaults.storage) }}":cloudinit
    --ostype l26
    --scsihw virtio-scsi-single
    --serial0 socket
    --vga serial0
    --boot order=scsi0
    --agent 1
    --ciuser "{{ item.value.ciuser | default(proxmox_kvm_defaults.ciuser | default(omit)) }}"
    --cipassword "{{ item.value.cipassword | default(proxmox_kvm_defaults.cipassword | default(omit)) }}"
    --sshkeys "{{ item.value.sshkeys | default(proxmox_kvm_defaults.sshkeys | default(omit)) }}"
    --cpu x86-64-v2-AES
    --cores "{{ item.value.cores | default(proxmox_kvm_defaults.cores | default(omit)) }}"
    --memory "{{ item.value.memory | default(proxmox_kvm_defaults.memory | default(omit)) }}"
    --net0 virtio,bridge=vmbr0,firewall=1
    --ipconfig0 ip=dhcp

    qm template $VMID
  with_dict: "{{ proxmox_kvm }}"
  when: "item.key not in pve_vms" # Only create new VMs
  tags: [ cloudinit-templates, rebuild-cloudinit-templates ]