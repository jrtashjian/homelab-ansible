- name: Check if GitLab Runner is already installed.
  ansible.builtin.stat: path=/usr/bin/gitlab-runner
  register: gitlab_runner_file

- name: Check if GitLab Runner repository is already installed.
  ansible.builtin.stat: path=/etc/apt/sources.list.d/runner_gitlab-runner.list
  register: gitlab_runner_repo

- name: Set fact for forcing repository installation
  ansible.builtin.set_fact:
    gitlab_runner_force_repo_install: "{{ 'gitlab-runner-repo-install' in ansible_run_tags }}"

- name: Install GitLab Runner dependencies
  become: true
  ansible.builtin.apt:
    state: present
    package:
      - curl
      - perl
  when: not gitlab_runner_file.stat.exists

- name: Download GitLab Runner repository installation script
  become: true
  ansible.builtin.get_url:
    url: https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh
    dest: /tmp/script.deb.sh
    validate_certs: true
  when: not gitlab_runner_repo.stat.exists or gitlab_runner_force_repo_install
  tags: gitlab-runner-repo-install

- name: Install GitLab Runner repository.
  become: true
  ansible.builtin.command: bash /tmp/script.deb.sh
  environment:
    EXTERNAL_URL: gitlab_external_url
  when: not gitlab_runner_repo.stat.exists or gitlab_runner_force_repo_install
  tags: gitlab-runner-repo-install

- name: Install GitLab Runner
  become: true
  ansible.builtin.package:
    name: "gitlab-runner"
    state: latest
  async: 600
  poll: 5
  notify: restart gitlab_runner

- name: Copy GitLab Runner configuration file.
  ansible.builtin.template:
    src: config.toml.j2
    dest: /tmp/config.toml
  notify: restart gitlab_runner

- name: Create cron job for nightly Docker cleanup
  become: true
  ansible.builtin.cron:
    name: "Docker cleanup"
    special_time: daily
    job: "docker system prune -f --volumes"
    user: root